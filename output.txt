文件路径: index.html
<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="专业的技术博客和讨论社区" />
    <meta name="keywords" content="博客,论坛,技术,分享,讨论" />
    <title>博客论坛</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>


文件路径: package.json
{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "build": "echo 'no build script'"
  }
}


文件路径: tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    "./index.html",
    "./src/**/*.{vue,js,ts,jsx,tsx}",
    "*.{js,ts,jsx,tsx,mdx}",
    "app/**/*.{ts,tsx}",
    "components/**/*.{ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
          50: "#eff6ff",
          100: "#dbeafe",
          200: "#bfdbfe",
          300: "#93c5fd",
          400: "#60a5fa",
          500: "#3b82f6",
          600: "#2563eb",
          700: "#1d4ed8",
          800: "#1e40af",
          900: "#1e3a8a",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      fontFamily: {
        sans: ["-apple-system", "BlinkMacSystemFont", "Segoe UI", "Roboto", "Helvetica Neue", "Arial", "sans-serif"],
      },
      animation: {
        "fade-in": "fadeIn 0.3s ease-in-out",
        "slide-up": "slideUp 0.3s ease-out",
        "bounce-in": "bounceIn 0.6s ease-out",
      },
      keyframes: {
        fadeIn: {
          "0%": { opacity: "0" },
          "100%": { opacity: "1" },
        },
        slideUp: {
          "0%": { transform: "translateY(20px)", opacity: "0" },
          "100%": { transform: "translateY(0)", opacity: "1" },
        },
        bounceIn: {
          "0%": { transform: "scale(0.3)", opacity: "0" },
          "50%": { transform: "scale(1.05)" },
          "70%": { transform: "scale(0.9)" },
          "100%": { transform: "scale(1)", opacity: "1" },
        },
      },
    },
  },
  plugins: [require("@tailwindcss/forms"), require("@tailwindcss/typography"), require("tailwindcss-animate")],
}


文件路径: vite.config.js
import { defineConfig } from "vite"
import vue from "@vitejs/plugin-vue"
import { resolve } from "path"

export default defineConfig({
  plugins: [vue()],
  resolve: {
    alias: {
      "@": resolve(__dirname, "src"),
    },
  },
  server: {
    port: 3000,
    proxy: {
      "/api": {
        target: "http://localhost:8000",
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/api/, ""),
      },
    },
  },
  build: {
    outDir: "dist",
    sourcemap: true,
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ["vue", "vue-router", "pinia"],
          ui: ["lucide-vue-next"],
          editor: ["@toast-ui/editor", "@toast-ui/vue-editor"],
        },
      },
    },
  },
  define: {
    __VUE_OPTIONS_API__: false,
    __VUE_PROD_DEVTOOLS__: false,
  },
})


文件路径: src\App.vue
<template>
  <div id="app" class="min-h-screen bg-gray-50">
    <!-- 全局Loading -->
    <LoadingSpinner v-if="globalStore.isLoading" />
    
    <!-- Toast通知 -->
    <Toast />
    
    <!-- 主要内容 -->
    <div class="flex flex-col min-h-screen">
      <!-- 顶部导航 -->
      <Header />
      
      <!-- 主内容区域 -->
      <main class="flex-1">
        <router-view />
      </main>
      
      <!-- 底部信息 -->
      <Footer />
    </div>
    
    <!-- 通知中心 -->
    <NotificationCenter />
  </div>
</template>

<script setup>
import { onMounted } from 'vue'
import { useGlobalStore } from './stores/global'
import { useAuthStore } from './stores/auth'
import Header from './components/layout/Header.vue'
import Footer from './components/layout/Footer.vue'
import LoadingSpinner from './components/common/LoadingSpinner.vue'
import Toast from './components/common/Toast.vue'
import NotificationCenter from './components/common/NotificationCenter.vue'

const globalStore = useGlobalStore()
const authStore = useAuthStore()

onMounted(() => {
  // 初始化应用
  authStore.initAuth()
})
</script>

<style>
@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';

/* 自定义样式 */
.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.3s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}

/* Markdown编辑器样式 */
.toastui-editor-defaultUI {
  border: 1px solid #e5e7eb;
  border-radius: 0.5rem;
}

.toastui-editor-defaultUI-toolbar {
  background-color: #f9fafb;
  border-bottom: 1px solid #e5e7eb;
}
</style>


文件路径: src\main.js
import { createApp } from "vue"
import { createPinia } from "pinia"
import piniaPluginPersistedstate from "pinia-plugin-persistedstate"
import router from "./router"
import App from "./App.vue"
import "./style.css"

// 创建Pinia实例
const pinia = createPinia()
pinia.use(piniaPluginPersistedstate)

// 创建Vue应用
const app = createApp(App)

app.use(pinia)
app.use(router)

app.mount("#app")


文件路径: src\style.css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* 自定义样式 */
@layer base {
  html {
    scroll-behavior: smooth;
  }

  body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
  }
}

@layer components {
  .btn-primary {
    @apply bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors;
  }

  .btn-secondary {
    @apply bg-gray-200 text-gray-900 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors;
  }

  .input-field {
    @apply w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent;
  }

  .card {
    @apply bg-white rounded-lg shadow-sm border border-gray-200;
  }
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }

  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
}

/* 动画效果 */
.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.3s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}

.slide-enter-active,
.slide-leave-active {
  transition: transform 0.3s ease;
}

.slide-enter-from {
  transform: translateX(100%);
}

.slide-leave-to {
  transform: translateX(-100%);
}

/* Markdown 编辑器样式 */
.toastui-editor-defaultUI {
  border: 1px solid #e5e7eb !important;
  border-radius: 0.5rem !important;
}

.toastui-editor-defaultUI-toolbar {
  background-color: #f9fafb !important;
  border-bottom: 1px solid #e5e7eb !important;
  border-radius: 0.5rem 0.5rem 0 0 !important;
}

.toastui-editor-md-container {
  background-color: #ffffff !important;
}

.toastui-editor-preview {
  background-color: #ffffff !important;
}

/* 响应式设计 */
@media (max-width: 640px) {
  .container {
    padding-left: 1rem;
    padding-right: 1rem;
  }
}

/* 无障碍设计 */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/* 焦点样式 */
.focus-visible {
  outline: 2px solid #3b82f6;
  outline-offset: 2px;
}

/* 打印样式 */
@media print {
  .no-print {
    display: none !important;
  }

  body {
    background: white !important;
    color: black !important;
  }
}


文件路径: src\api\auth.js
import api from "./index"

export const authAPI = {
  // 登录
  login: (credentials) => api.post("/auth/login", credentials),

  // 注册
  register: (userData) => api.post("/auth/register", userData),

  // 获取用户信息
  getProfile: () => api.get("/auth/profile"),

  // 更新用户信息
  updateProfile: (profileData) => api.put("/auth/profile", profileData),

  // 上传头像
  uploadAvatar: (formData) =>
    api.post("/auth/upload-avatar", formData, {
      headers: {
        "Content-Type": "multipart/form-data",
      },
    }),

  // 修改密码
  changePassword: (passwordData) => api.put("/auth/change-password", passwordData),
}


文件路径: src\api\index.js
import axios from "axios"
import { useAuthStore } from "../stores/auth"
import { useToastStore } from "../stores/toast"

// 创建axios实例
const api = axios.create({
  baseURL: import.meta.env.VITE_API_BASE_URL || "http://localhost:8000/api",
  timeout: 10000,
  headers: {
    "Content-Type": "application/json",
  },
})

// 请求拦截器
api.interceptors.request.use(
  (config) => {
    const authStore = useAuthStore()
    if (authStore.token) {
      config.headers.Authorization = `Bearer ${authStore.token}`
    }
    return config
  },
  (error) => {
    return Promise.reject(error)
  },
)

// 响应拦截器
api.interceptors.response.use(
  (response) => {
    return response
  },
  (error) => {
    const toastStore = useToastStore()
    const authStore = useAuthStore()

    if (error.response?.status === 401) {
      authStore.logout()
      toastStore.error("登录已过期，请重新登录")
    } else if (error.response?.status === 403) {
      toastStore.error("权限不足")
    } else if (error.response?.status >= 500) {
      toastStore.error("服务器错误，请稍后重试")
    }

    return Promise.reject(error)
  },
)

export default api


文件路径: src\api\notifications.js
import api from "./index"

export const notificationsAPI = {
  // 获取通知列表
  getNotifications: (params) => api.get("/notifications", { params }),

  // 标记通知为已读
  markAsRead: (id) => api.put(`/notifications/${id}/read`),

  // 标记所有通知为已读
  markAllAsRead: () => api.put("/notifications/read-all"),

  // 删除通知
  deleteNotification: (id) => api.delete(`/notifications/${id}`),

  // 获取未读通知数量
  getUnreadCount: () => api.get("/notifications/unread-count"),
}


文件路径: src\api\posts.js
import api from "./index"

export const postsAPI = {
  // 获取文章列表
  getPosts: (params) => api.get("/posts", { params }),

  // 获取文章详情
  getPost: (slug) => api.get(`/posts/${slug}`),

  // 创建文章
  createPost: (postData) => api.post("/posts", postData),

  // 更新文章
  updatePost: (id, postData) => api.put(`/posts/${id}`, postData),

  // 删除文章
  deletePost: (id) => api.delete(`/posts/${id}`),

  // 点赞文章
  likePost: (id) => api.post(`/posts/${id}/like`),

  // 取消点赞
  unlikePost: (id) => api.delete(`/posts/${id}/like`),

  // 转发文章
  sharePost: (id, shareData) => api.post(`/posts/${id}/share`, shareData),

  // 举报文章
  reportPost: (id, reportData) => api.post(`/posts/${id}/report`, reportData),

  // 收藏文章
  bookmarkPost: (id) => api.post(`/posts/${id}/bookmark`),

  // 取消收藏
  unbookmarkPost: (id) => api.delete(`/posts/${id}/bookmark`),

  // 上传封面图
  uploadCover: (formData) =>
    api.post("/posts/upload-cover", formData, {
      headers: {
        "Content-Type": "multipart/form-data",
      },
    }),

  // 搜索文章
  searchPosts: (query, params) =>
    api.get("/posts/search", {
      params: { q: query, ...params },
    }),
}


文件路径: src\components\common\LoadingSpinner.vue
<template>
  <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 flex items-center space-x-3">
      <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
      <span class="text-gray-700">加载中...</span>
    </div>
  </div>
</template>


文件路径: src\components\common\NotificationCenter.vue
<template>
  <div v-if="show" class="fixed inset-0 z-50 overflow-hidden">
    <div class="absolute inset-0 bg-black bg-opacity-50" @click="close"></div>
    <div class="absolute right-0 top-0 h-full w-96 bg-white shadow-xl">
      <div class="flex flex-col h-full">
        <!-- 头部 -->
        <div class="flex items-center justify-between p-4 border-b border-gray-200">
          <h2 class="text-lg font-semibold text-gray-900">通知中心</h2>
          <button @click="close" class="text-gray-400 hover:text-gray-600">
            <X class="w-5 h-5" />
          </button>
        </div>
        
        <!-- 通知列表 -->
        <div class="flex-1 overflow-y-auto">
          <div v-if="notifications.length === 0" class="p-8 text-center">
            <Bell class="w-12 h-12 text-gray-300 mx-auto mb-4" />
            <p class="text-gray-500">暂无通知</p>
          </div>
          
          <div v-else class="divide-y divide-gray-200">
            <div
              v-for="notification in notifications"
              :key="notification.id"
              :class="[
                'p-4 hover:bg-gray-50 cursor-pointer',
                !notification.is_read && 'bg-blue-50'
              ]"
              @click="handleNotificationClick(notification)"
            >
              <div class="flex items-start space-x-3">
                <div class="flex-shrink-0">
                  <div :class="getNotificationIconClass(notification.type)">
                    <component :is="getNotificationIcon(notification.type)" class="w-4 h-4" />
                  </div>
                </div>
                <div class="flex-1 min-w-0">
                  <p class="text-sm font-medium text-gray-900">
                    {{ notification.title }}
                  </p>
                  <p class="text-sm text-gray-500 mt-1">
                    {{ notification.content }}
                  </p>
                  <p class="text-xs text-gray-400 mt-2">
                    {{ formatDate(notification.created_at) }}
                  </p>
                </div>
                <div v-if="!notification.is_read" class="w-2 h-2 bg-blue-500 rounded-full"></div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- 底部操作 -->
        <div class="p-4 border-t border-gray-200">
          <button
            @click="markAllAsRead"
            class="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            全部标记为已读
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { X, Bell, Heart, MessageCircle, UserPlus, AlertTriangle } from 'lucide-vue-next'
import { notificationsAPI } from '../../api/notifications'
import { formatDate } from '../../utils/date'

const show = ref(false)
const notifications = ref([])

const getNotificationIcon = (type) => {
  const icons = {
    like: Heart,
    comment: MessageCircle,
    follow: UserPlus,
    system: AlertTriangle
  }
  return icons[type] || Bell
}

const getNotificationIconClass = (type) => {
  const classes = {
    like: 'w-8 h-8 bg-red-100 text-red-600 rounded-full flex items-center justify-center',
    comment: 'w-8 h-8 bg-blue-100 text-blue-600 rounded-full flex items-center justify-center',
    follow: 'w-8 h-8 bg-green-100 text-green-600 rounded-full flex items-center justify-center',
    system: 'w-8 h-8 bg-yellow-100 text-yellow-600 rounded-full flex items-center justify-center'
  }
  return classes[type] || 'w-8 h-8 bg-gray-100 text-gray-600 rounded-full flex items-center justify-center'
}

const open = () => {
  show.value = true
  loadNotifications()
}

const close = () => {
  show.value = false
}

const loadNotifications = async () => {
  try {
    const response = await notificationsAPI.getNotifications()
    notifications.value = response.data
  } catch (error) {
    console.error('加载通知失败:', error)
  }
}

const handleNotificationClick = async (notification) => {
  if (!notification.is_read) {
    try {
      await notificationsAPI.markAsRead(notification.id)
      notification.is_read = true
    } catch (error) {
      console.error('标记通知已读失败:', error)
    }
  }
  
  // 根据通知类型跳转到相应页面
  if (notification.link) {
    window.location.href = notification.link
  }
}

const markAllAsRead = async () => {
  try {
    await notificationsAPI.markAllAsRead()
    notifications.value.forEach(n => n.is_read = true)
  } catch (error) {
    console.error('标记全部已读失败:', error)
  }
}

defineExpose({
  open,
  close
})
</script>


文件路径: src\components\common\SearchBar.vue
<template>
  <div class="relative">
    <div class="relative">
      <Search class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
      <input
        v-model="searchQuery"
        @keyup.enter="handleSearch"
        @input="handleInput"
        type="text"
        placeholder="搜索文章、用户、话题..."
        class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
      />
    </div>
    
    <!-- 搜索建议 -->
    <div 
      v-if="showSuggestions && suggestions.length > 0"
      class="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-50"
    >
      <div class="py-2">
        <div 
          v-for="suggestion in suggestions" 
          :key="suggestion.id"
          @click="selectSuggestion(suggestion)"
          class="px-4 py-2 hover:bg-gray-100 cursor-pointer flex items-center space-x-3"
        >
          <div class="flex-shrink-0">
            <div 
              v-if="suggestion.type === 'post'"
              class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center"
            >
              <FileText class="w-4 h-4 text-blue-600" />
            </div>
            <div 
              v-else-if="suggestion.type === 'user'"
              class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center"
            >
              <User class="w-4 h-4 text-green-600" />
            </div>
            <div 
              v-else
              class="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center"
            >
              <Hash class="w-4 h-4 text-purple-600" />
            </div>
          </div>
          <div class="flex-1 min-w-0">
            <p class="text-sm font-medium text-gray-900 truncate">
              {{ suggestion.title || suggestion.name }}
            </p>
            <p class="text-xs text-gray-500 truncate">
              {{ suggestion.description || suggestion.bio }}
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, watch, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import { Search, FileText, User, Hash } from 'lucide-vue-next'
import { searchAPI } from '../../api/search'
import { useToastStore } from '../../stores/toast'

const router = useRouter()
const toastStore = useToastStore()

const searchQuery = ref('')
const suggestions = ref([])
const showSuggestions = ref(false)
const searchTimeout = ref(null)

// 使用 onMounted 确保 handleInput 在组件挂载后只被定义一次
onMounted(() => {
  const handleInput = () => {
    if (searchTimeout.value) {
      clearTimeout(searchTimeout.value)
    }
    
    if (searchQuery.value.trim().length < 2) {
      suggestions.value = []
      showSuggestions.value = false
      return
    }
    
    searchTimeout.value = setTimeout(async () => {
      try {
        const response = await searchAPI.getSuggestions(searchQuery.value)
        suggestions.value = response.data
        showSuggestions.value = true
      } catch (error) {
        console.error('获取搜索建议失败:', error)
      }
    }, 300)
  }

  // 将 handleInput 赋值给组件实例，以便在模板中使用
  window.handleInput = handleInput;
});


const handleSearch = () => {
  if (searchQuery.value.trim()) {
    showSuggestions.value = false
    router.push({
      name: 'Search',
      query: { q: searchQuery.value }
    })
  }
}

const selectSuggestion = (suggestion) => {
  showSuggestions.value = false
  
  if (suggestion.type === 'post') {
    router.push(`/post/${suggestion.slug}`)
  } else if (suggestion.type === 'user') {
    router.push(`/user/${suggestion.id}`)
  } else {
    router.push({
      name: 'Search',
      query: { q: suggestion.name, type: 'tag' }
    })
  }
}

// 监听路由变化，关闭建议框
watch(() => router.currentRoute.value, () => {
  showSuggestions.value = false
})
</script>


文件路径: src\components\common\Toast.vue
<template>
  <teleport to="body">
    <div class="fixed top-4 right-4 z-50 space-y-2">
      <transition-group name="toast" tag="div">
        <div
          v-for="toast in toastStore.toasts"
          :key="toast.id"
          :class="[
            'max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto ring-1 ring-black ring-opacity-5 overflow-hidden',
            getToastClass(toast.type)
          ]"
        >
          <div class="p-4">
            <div class="flex items-start">
              <div class="flex-shrink-0">
                <CheckCircle v-if="toast.type === 'success'" class="h-6 w-6 text-green-400" />
                <XCircle v-else-if="toast.type === 'error'" class="h-6 w-6 text-red-400" />
                <AlertTriangle v-else-if="toast.type === 'warning'" class="h-6 w-6 text-yellow-400" />
                <Info v-else class="h-6 w-6 text-blue-400" />
              </div>
              <div class="ml-3 w-0 flex-1 pt-0.5">
                <p class="text-sm font-medium text-gray-900">
                  {{ toast.message }}
                </p>
              </div>
              <div class="ml-4 flex-shrink-0 flex">
                <button
                  @click="toastStore.removeToast(toast.id)"
                  class="bg-white rounded-md inline-flex text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                >
                  <X class="h-5 w-5" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </transition-group>
    </div>
  </teleport>
</template>

<script setup>
import { CheckCircle, XCircle, AlertTriangle, Info, X } from 'lucide-vue-next'
import { useToastStore } from '../../stores/toast'

const toastStore = useToastStore()

const getToastClass = (type) => {
  const classes = {
    success: 'border-l-4 border-green-400',
    error: 'border-l-4 border-red-400',
    warning: 'border-l-4 border-yellow-400',
    info: 'border-l-4 border-blue-400'
  }
  return classes[type] || classes.info
}
</script>

<style scoped>
.toast-enter-active,
.toast-leave-active {
  transition: all 0.3s ease;
}

.toast-enter-from {
  opacity: 0;
  transform: translateX(100%);
}

.toast-leave-to {
  opacity: 0;
  transform: translateX(100%);
}
</style>


文件路径: src\components\layout\Footer.vue
<template>
  <footer class="bg-gray-900 text-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-8">
        <!-- 网站信息 -->
        <div class="col-span-1 md:col-span-2">
          <div class="flex items-center space-x-2 mb-4">
            <div class="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
              <span class="text-white font-bold text-sm">B</span>
            </div>
            <span class="text-xl font-bold">博客论坛</span>
          </div>
          <p class="text-gray-400 mb-4 max-w-md">
            一个专业的技术博客和讨论社区，汇聚优质内容和活跃用户，共同构建知识分享平台。
          </p>
          <div class="flex space-x-4">
            <a href="#" class="text-gray-400 hover:text-white transition-colors">
              <span class="sr-only">GitHub</span>
              <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
              </svg>
            </a>
            <a href="#" class="text-gray-400 hover:text-white transition-colors">
              <span class="sr-only">Twitter</span>
              <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"/>
              </svg>
            </a>
          </div>
        </div>
        
        <!-- 快速链接 -->
        <div>
          <h3 class="text-sm font-semibold text-gray-400 tracking-wider uppercase mb-4">
            快速链接
          </h3>
          <ul class="space-y-2">
            <li>
              <router-link to="/" class="text-gray-300 hover:text-white transition-colors">
                首页
              </router-link>
            </li>
            <li>
              <router-link to="/search" class="text-gray-300 hover:text-white transition-colors">
                搜索
              </router-link>
            </li>
            <li>
              <router-link to="/anonymous" class="text-gray-300 hover:text-white transition-colors">
                匿名频道
              </router-link>
            </li>
          </ul>
        </div>
        
        <!-- 帮助支持 -->
        <div>
          <h3 class="text-sm font-semibold text-gray-400 tracking-wider uppercase mb-4">
            帮助支持
          </h3>
          <ul class="space-y-2">
            <li>
              <a href="#" class="text-gray-300 hover:text-white transition-colors">
                使用指南
              </a>
            </li>
            <li>
              <a href="#" class="text-gray-300 hover:text-white transition-colors">
                社区规则
              </a>
            </li>
            <li>
              <a href="#" class="text-gray-300 hover:text-white transition-colors">
                联系我们
              </a>
            </li>
            <li>
              <a href="#" class="text-gray-300 hover:text-white transition-colors">
                意见反馈
              </a>
            </li>
          </ul>
        </div>
      </div>
      
      <div class="mt-8 pt-8 border-t border-gray-800 flex flex-col sm:flex-row justify-between items-center">
        <p class="text-gray-400 text-sm">
          © 2024 博客论坛. 保留所有权利.
        </p>
        <div class="mt-4 sm:mt-0 flex space-x-6">
          <a href="#" class="text-gray-400 hover:text-white text-sm transition-colors">
            隐私政策
          </a>
          <a href="#" class="text-gray-400 hover:text-white text-sm transition-colors">
            服务条款
          </a>
        </div>
      </div>
    </div>
  </footer>
</template>


文件路径: src\components\layout\Header.vue
<template>
  <header class="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center h-16">
        <!-- Logo -->
        <div class="flex items-center">
          <router-link to="/" class="flex items-center space-x-2">
            <div class="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
              <span class="text-white font-bold text-sm">B</span>
            </div>
            <span class="text-xl font-bold text-gray-900">博客论坛</span>
          </router-link>
        </div>
        
        <!-- 搜索框 -->
        <div class="flex-1 max-w-lg mx-8">
          <SearchBar />
        </div>
        
        <!-- 导航菜单 -->
        <nav class="flex items-center space-x-4">
          <!-- 匿名频道 -->
          <router-link 
            v-if="authStore.isAuthenticated"
            to="/anonymous" 
            class="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium"
          >
            匿名频道
          </router-link>
          
          <!-- 发布文章 -->
          <router-link 
            v-if="authStore.isAuthenticated"
            to="/create-post" 
            class="bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700"
          >
            发布文章
          </router-link>
          
          <!-- 通知 -->
          <button 
            v-if="authStore.isAuthenticated"
            @click="toggleNotifications"
            class="relative p-2 text-gray-600 hover:text-gray-900"
          >
            <Bell class="w-5 h-5" />
            <span 
              v-if="unreadCount > 0"
              class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center"
            >
              {{ unreadCount > 99 ? '99+' : unreadCount }}
            </span>
          </button>
          
          <!-- 用户菜单 -->
          <div v-if="authStore.isAuthenticated" class="relative">
            <button 
              @click="toggleUserMenu"
              class="flex items-center space-x-2 p-2 rounded-md hover:bg-gray-100"
            >
              <img 
                :src="authStore.user?.avatar || '/placeholder.svg?height=32&width=32'" 
                :alt="authStore.user?.username"
                class="w-8 h-8 rounded-full"
              />
              <ChevronDown class="w-4 h-4 text-gray-500" />
            </button>
            
            <!-- 下拉菜单 -->
            <div 
              v-if="showUserMenu"
              class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50"
            >
              <router-link 
                :to="`/user/${authStore.user?.id}`"
                class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                @click="showUserMenu = false"
              >
                个人中心
              </router-link>
              <router-link 
                v-if="authStore.isAdmin"
                to="/admin"
                class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                @click="showUserMenu = false"
              >
                管理后台
              </router-link>
              <hr class="my-1">
              <button 
                @click="handleLogout"
                class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
              >
                退出登录
              </button>
            </div>
          </div>
          
          <!-- 登录/注册 -->
          <div v-else class="flex items-center space-x-2">
            <router-link 
              to="/login"
              class="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium"
            >
              登录
            </router-link>
            <router-link 
              to="/register"
              class="bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700"
            >
              注册
            </router-link>
          </div>
        </nav>
      </div>
    </div>
  </header>
</template>

<script setup>
import { ref, onMounted, onUnmounted } from 'vue'
import { useRouter } from 'vue-router'
import { Bell, ChevronDown } from 'lucide-vue-next'
import { useAuthStore } from '../../stores/auth'
import SearchBar from '../common/SearchBar.vue'

const router = useRouter()
const authStore = useAuthStore()

const showUserMenu = ref(false)
const showNotifications = ref(false)
const unreadCount = ref(0)

// 点击外部关闭菜单
const handleClickOutside = (event) => {
  if (!event.target.closest('.relative')) {
    showUserMenu.value = false
    showNotifications.value = false
  }
}

const toggleUserMenu = () => {
  showUserMenu.value = !showUserMenu.value
  showNotifications.value = false
}

const toggleNotifications = () => {
  showNotifications.value = !showNotifications.value
  showUserMenu.value = false
}

const handleLogout = () => {
  authStore.logout()
  showUserMenu.value = false
  router.push('/')
}


onMounted(() => {
  document.addEventListener('click', handleClickOutside)
})

onUnmounted(() => {
  document.removeEventListener('click', handleClickOutside)
})
</script>


文件路径: src\components\post\PostItem.vue
<template>
  <article class="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow p-6">
    <!-- 作者信息 -->
    <div class="flex items-center space-x-3 mb-4">
      <router-link :to="`/user/${post.author.id}`">
        <img 
          :src="post.author.avatar || '/placeholder.svg?height=40&width=40'"
          :alt="post.author.username"
          class="w-10 h-10 rounded-full hover:ring-2 hover:ring-blue-500 transition-all"
        />
      </router-link>
      <div class="flex-1">
        <div class="flex items-center space-x-2">
          <router-link 
            :to="`/user/${post.author.id}`"
            class="font-medium text-gray-900 hover:text-blue-600"
          >
            {{ post.author.username }}
          </router-link>
          <span v-if="post.author.is_member" class="px-2 py-0.5 bg-yellow-100 text-yellow-800 text-xs rounded-full">
            会员
          </span>
        </div>
        <p class="text-sm text-gray-500">{{ formatDate(post.created_at) }}</p>
      </div>
      
      <!-- 更多操作 -->
      <div class="relative">
        <button 
          @click="showMenu = !showMenu"
          class="p-2 text-gray-400 hover:text-gray-600 rounded-full hover:bg-gray-100"
        >
          <MoreHorizontal class="w-4 h-4" />
        </button>
        
        <div 
          v-if="showMenu"
          class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-10"
        >
          <button 
            @click="handleReport"
            class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
          >
            举报
          </button>
          <button 
            v-if="canEdit"
            @click="handleEdit"
            class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
          >
            编辑
          </button>
          <button 
            v-if="canDelete"
            @click="handleDelete"
            class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100"
          >
            删除
          </button>
        </div>
      </div>
    </div>
    
    <!-- 文章内容 -->
    <div class="mb-4">
      <router-link :to="`/post/${post.slug}`">
        <h2 class="text-xl font-semibold text-gray-900 mb-2 hover:text-blue-600 transition-colors">
          {{ post.title }}
        </h2>
      </router-link>
      
      <p class="text-gray-600 mb-3 line-clamp-3">
        {{ post.summary }}
      </p>
      
      <!-- 封面图 -->
      <div v-if="post.cover_image" class="mb-3">
        <router-link :to="`/post/${post.slug}`">
          <img 
            :src="post.cover_image"
            :alt="post.title"
            class="w-full h-48 object-cover rounded-lg hover:opacity-90 transition-opacity"
          />
        </router-link>
      </div>
      
      <!-- 标签 -->
      <div v-if="post.tags && post.tags.length > 0" class="flex flex-wrap gap-2 mb-3">
        <span 
          v-for="tag in post.tags"
          :key="tag.id"
          class="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full hover:bg-gray-200 cursor-pointer"
        >
          {{ tag.name }}
        </span>
      </div>
    </div>
    
    <!-- 互动按钮 -->
    <div class="flex items-center justify-between pt-4 border-t border-gray-100">
      <div class="flex items-center space-x-6">
        <!-- 点赞 -->
        <button 
          @click="handleLike"
          :class="[
            'flex items-center space-x-1 text-sm transition-colors',
            post.is_liked 
              ? 'text-red-500 hover:text-red-600' 
              : 'text-gray-500 hover:text-red-500'
          ]"
        >
          <Heart :class="{ 'fill-current': post.is_liked }" class="w-4 h-4" />
          <span>{{ post.likes_count || 0 }}</span>
        </button>
        
        <!-- 评论 -->
        <router-link 
          :to="`/post/${post.slug}#comments`"
          class="flex items-center space-x-1 text-sm text-gray-500 hover:text-blue-500 transition-colors"
        >
          <MessageCircle class="w-4 h-4" />
          <span>{{ post.comments_count || 0 }}</span>
        </router-link>
        
        <!-- 浏览量 -->
        <div class="flex items-center space-x-1 text-sm text-gray-500">
          <Eye class="w-4 h-4" />
          <span>{{ post.views_count || 0 }}</span>
        </div>
      </div>
      
      <div class="flex items-center space-x-2">
        <!-- 收藏 -->
        <button 
          @click="handleBookmark"
          :class="[
            'p-2 rounded-full transition-colors',
            post.is_bookmarked 
              ? 'text-yellow-500 hover:text-yellow-600 bg-yellow-50' 
              : 'text-gray-400 hover:text-yellow-500 hover:bg-yellow-50'
          ]"
        >
          <Bookmark :class="{ 'fill-current': post.is_bookmarked }" class="w-4 h-4" />
        </button>
        
        <!-- 分享 -->
        <button 
          @click="handleShare"
          class="p-2 text-gray-400 hover:text-blue-500 rounded-full hover:bg-blue-50 transition-colors"
        >
          <Share2 class="w-4 h-4" />
        </button>
      </div>
    </div>
  </article>
</template>

<script setup>
import { ref, computed } from 'vue'
import { useRouter } from 'vue-router'
import { 
  Heart, 
  MessageCircle, 
  Eye, 
  Bookmark, 
  Share2, 
  MoreHorizontal 
} from 'lucide-vue-next'
import { useAuthStore } from '../../stores/auth'
import { formatDate } from '../../utils/date'

const props = defineProps({
  post: {
    type: Object,
    required: true
  }
})

const emit = defineEmits(['like', 'bookmark', 'share'])

const router = useRouter()
const authStore = useAuthStore()

const showMenu = ref(false)

const canEdit = computed(() => {
  return authStore.isAuthenticated && 
         (authStore.user?.id === props.post.author.id || authStore.isAdmin)
})

const canDelete = computed(() => {
  return authStore.isAuthenticated && 
         (authStore.user?.id === props.post.author.id || authStore.isAdmin)
})

const handleLike = () => {
  if (!authStore.isAuthenticated) {
    router.push('/login')
    return
  }
  emit('like', props.post.id, props.post.is_liked)
}

const handleBookmark = () => {
  if (!authStore.isAuthenticated) {
    router.push('/login')
    return
  }
  emit('bookmark', props.post.id, props.post.is_bookmarked)
}

const handleShare = () => {
  emit('share', props.post)
}

const handleReport = () => {
  // 实现举报功能
  console.log('举报文章:', props.post.id)
}

const handleEdit = () => {
  router.push(`/edit-post/${props.post.id}`)
}

const handleDelete = () => {
  // 实现删除功能
  console.log('删除文章:', props.post.id)
}
</script>

<style scoped>
.line-clamp-3 {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
</style>


文件路径: src\components\post\PostList.vue
<template>
  <div class="space-y-6">
    <!-- 文章列表 -->
    <div v-if="posts.length > 0" class="space-y-4">
      <PostItem 
        v-for="post in posts"
        :key="post.id"
        :post="post"
        @like="handleLike"
        @bookmark="handleBookmark"
        @share="handleShare"
      />
    </div>
    
    <!-- 空状态 -->
    <div v-else-if="!loading" class="text-center py-12">
      <div class="w-24 h-24 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
        <FileText class="w-12 h-12 text-gray-400" />
      </div>
      <h3 class="text-lg font-medium text-gray-900 mb-2">暂无文章</h3>
      <p class="text-gray-500">还没有发布任何文章</p>
    </div>
    
    <!-- 加载更多 -->
    <div v-if="hasMore" class="text-center py-6">
      <button
        @click="$emit('load-more')"
        :disabled="loading"
        class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <span v-if="loading">加载中...</span>
        <span v-else>加载更多</span>
      </button>
    </div>
    
    <!-- 加载骨架屏 -->
    <div v-if="loading && posts.length === 0" class="space-y-4">
      <div v-for="i in 5" :key="i" class="bg-white rounded-lg shadow-sm p-6">
        <div class="animate-pulse">
          <div class="flex items-center space-x-3 mb-4">
            <div class="w-10 h-10 bg-gray-200 rounded-full"></div>
            <div class="flex-1">
              <div class="h-4 bg-gray-200 rounded w-1/4 mb-2"></div>
              <div class="h-3 bg-gray-200 rounded w-1/6"></div>
            </div>
          </div>
          <div class="h-6 bg-gray-200 rounded w-3/4 mb-3"></div>
          <div class="h-4 bg-gray-200 rounded w-full mb-2"></div>
          <div class="h-4 bg-gray-200 rounded w-2/3"></div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { FileText } from 'lucide-vue-next'
import PostItem from './PostItem.vue'
import { postsAPI } from '../../api/posts'
import { useToastStore } from '../../stores/toast'

defineProps({
  posts: {
    type: Array,
    default: () => []
  },
  loading: {
    type: Boolean,
    default: false
  },
  hasMore: {
    type: Boolean,
    default: false
  }
})

defineEmits(['load-more'])

const toastStore = useToastStore()

const handleLike = async (postId, isLiked) => {
  try {
    if (isLiked) {
      await postsAPI.unlikePost(postId)
    } else {
      await postsAPI.likePost(postId)
    }
  } catch (error) {
    toastStore.error('操作失败')
  }
}

const handleBookmark = async (postId, isBookmarked) => {
  try {
    if (isBookmarked) {
      await postsAPI.unbookmarkPost(postId)
    } else {
      await postsAPI.bookmarkPost(postId)
    }
  } catch (error) {
    toastStore.error('操作失败')
  }
}

const handleShare = (post) => {
  // 实现分享功能
  if (navigator.share) {
    navigator.share({
      title: post.title,
      text: post.summary,
      url: window.location.origin + `/post/${post.slug}`
    })
  } else {
    // 复制链接到剪贴板
    navigator.clipboard.writeText(window.location.origin + `/post/${post.slug}`)
    toastStore.success('链接已复制到剪贴板')
  }
}
</script>


文件路径: src\router\index.js
import { createRouter, createWebHistory } from "vue-router"
import { useAuthStore } from "../stores/auth"

// 页面组件
import Home from "../views/Home.vue"
import PostDetail from "../views/PostDetail.vue"
import Search from "../views/Search.vue"
import Login from "../views/auth/Login.vue"
import Register from "../views/auth/Register.vue"
import UserProfile from "../views/user/UserProfile.vue"
import CreatePost from "../views/post/CreatePost.vue"
import EditPost from "../views/post/EditPost.vue"
import AdminDashboard from "../views/admin/AdminDashboard.vue"
import AnonymousChannel from "../views/AnonymousChannel.vue"

const routes = [
  {
    path: "/",
    name: "Home",
    component: Home,
    meta: { title: "首页" },
  },
  {
    path: "/post/:slug",
    name: "PostDetail",
    component: PostDetail,
    meta: { title: "文章详情" },
  },
  {
    path: "/search",
    name: "Search",
    component: Search,
    meta: { title: "搜索结果" },
  },
  {
    path: "/login",
    name: "Login",
    component: Login,
    meta: { title: "登录", guest: true },
  },
  {
    path: "/register",
    name: "Register",
    component: Register,
    meta: { title: "注册", guest: true },
  },
  {
    path: "/user/:id",
    name: "UserProfile",
    component: UserProfile,
    meta: { title: "个人中心", requiresAuth: true },
  },
  {
    path: "/create-post",
    name: "CreatePost",
    component: CreatePost,
    meta: { title: "发布文章", requiresAuth: true },
  },
  {
    path: "/edit-post/:id",
    name: "EditPost",
    component: EditPost,
    meta: { title: "编辑文章", requiresAuth: true },
  },
  {
    path: "/admin",
    name: "AdminDashboard",
    component: AdminDashboard,
    meta: { title: "管理后台", requiresAuth: true, requiresAdmin: true },
  },
  {
    path: "/anonymous",
    name: "AnonymousChannel",
    component: AnonymousChannel,
    meta: { title: "匿名频道", requiresAuth: true },
  },
]

const router = createRouter({
  history: createWebHistory(),
  routes,
  scrollBehavior(to, from, savedPosition) {
    if (savedPosition) {
      return savedPosition
    } else {
      return { top: 0 }
    }
  },
})

// 路由守卫
router.beforeEach((to, from, next) => {
  const authStore = useAuthStore()

  // 设置页面标题
  document.title = to.meta.title ? `${to.meta.title} - 博客论坛` : "博客论坛"

  // 检查认证状态
  if (to.meta.requiresAuth && !authStore.isAuthenticated) {
    next("/login")
    return
  }

  // 检查管理员权限
  if (to.meta.requiresAdmin && !authStore.isAdmin) {
    next("/")
    return
  }

  // 已登录用户访问登录/注册页面
  if (to.meta.guest && authStore.isAuthenticated) {
    next("/")
    return
  }

  next()
})

export default router


文件路径: src\stores\auth.js
import { defineStore } from "pinia"
import { ref, computed } from "vue"
import { authAPI } from "../api/auth"
import { useToastStore } from "./toast"

export const useAuthStore = defineStore(
  "auth",
  () => {
    const user = ref(null)
    const token = ref(null)
    const isLoading = ref(false)

    const toastStore = useToastStore()

    // 计算属性
    const isAuthenticated = computed(() => !!token.value)
    const isAdmin = computed(() => user.value?.role === "admin")
    const isMember = computed(() => user.value?.is_member || false)

    // 初始化认证状态
    const initAuth = async () => {
      const savedToken = localStorage.getItem("token")
      if (savedToken) {
        token.value = savedToken
        try {
          await fetchUser()
        } catch (error) {
          logout()
        }
      }
    }

    // 登录
    const login = async (credentials) => {
      isLoading.value = true
      try {
        const response = await authAPI.login(credentials)
        token.value = response.data.access_token
        user.value = response.data.user
        localStorage.setItem("token", token.value)
        toastStore.success("登录成功")
        return true
      } catch (error) {
        toastStore.error(error.response?.data?.detail || "登录失败")
        return false
      } finally {
        isLoading.value = false
      }
    }

    // 注册
    const register = async (userData) => {
      isLoading.value = true
      try {
        const response = await authAPI.register(userData)
        toastStore.success("注册成功，请登录")
        return true
      } catch (error) {
        toastStore.error(error.response?.data?.detail || "注册失败")
        return false
      } finally {
        isLoading.value = false
      }
    }

    // 登出
    const logout = () => {
      user.value = null
      token.value = null
      localStorage.removeItem("token")
      toastStore.success("已退出登录")
    }

    // 获取用户信息
    const fetchUser = async () => {
      try {
        const response = await authAPI.getProfile()
        user.value = response.data
      } catch (error) {
        throw error
      }
    }

    // 更新用户信息
    const updateProfile = async (profileData) => {
      isLoading.value = true
      try {
        const response = await authAPI.updateProfile(profileData)
        user.value = response.data
        toastStore.success("个人信息更新成功")
        return true
      } catch (error) {
        toastStore.error(error.response?.data?.detail || "更新失败")
        return false
      } finally {
        isLoading.value = false
      }
    }

    return {
      user,
      token,
      isLoading,
      isAuthenticated,
      isAdmin,
      isMember,
      initAuth,
      login,
      register,
      logout,
      fetchUser,
      updateProfile,
    }
  },
  {
    persist: {
      paths: ["token", "user"],
    },
  },
)


文件路径: src\stores\global.js
import { defineStore } from "pinia"
import { ref } from "vue"

export const useGlobalStore = defineStore(
  "global",
  () => {
    const isLoading = ref(false)
    const sidebarOpen = ref(false)
    const theme = ref("light")

    const setLoading = (loading) => {
      isLoading.value = loading
    }

    const toggleSidebar = () => {
      sidebarOpen.value = !sidebarOpen.value
    }

    const toggleTheme = () => {
      theme.value = theme.value === "light" ? "dark" : "light"
    }

    return {
      isLoading,
      sidebarOpen,
      theme,
      setLoading,
      toggleSidebar,
      toggleTheme,
    }
  },
  {
    persist: {
      paths: ["theme"],
    },
  },
)


文件路径: src\stores\toast.js
import { defineStore } from "pinia"
import { ref } from "vue"

export const useToastStore = defineStore("toast", () => {
  const toasts = ref([])

  const addToast = (message, type = "info", duration = 3000) => {
    const id = Date.now()
    const toast = {
      id,
      message,
      type,
      duration,
    }

    toasts.value.push(toast)

    if (duration > 0) {
      setTimeout(() => {
        removeToast(id)
      }, duration)
    }

    return id
  }

  const removeToast = (id) => {
    const index = toasts.value.findIndex((toast) => toast.id === id)
    if (index > -1) {
      toasts.value.splice(index, 1)
    }
  }

  const success = (message, duration) => addToast(message, "success", duration)
  const error = (message, duration) => addToast(message, "error", duration)
  const warning = (message, duration) => addToast(message, "warning", duration)
  const info = (message, duration) => addToast(message, "info", duration)

  return {
    toasts,
    addToast,
    removeToast,
    success,
    error,
    warning,
    info,
  }
})


文件路径: src\utils\date.js
export const formatDate = (dateString) => {
  const date = new Date(dateString)
  const now = new Date()
  const diff = now - date

  const minute = 60 * 1000
  const hour = 60 * minute
  const day = 24 * hour
  const week = 7 * day
  const month = 30 * day
  const year = 365 * day

  if (diff < minute) {
    return "刚刚"
  } else if (diff < hour) {
    return `${Math.floor(diff / minute)}分钟前`
  } else if (diff < day) {
    return `${Math.floor(diff / hour)}小时前`
  } else if (diff < week) {
    return `${Math.floor(diff / day)}天前`
  } else if (diff < month) {
    return `${Math.floor(diff / week)}周前`
  } else if (diff < year) {
    return `${Math.floor(diff / month)}个月前`
  } else {
    return `${Math.floor(diff / year)}年前`
  }
}

export const formatFullDate = (dateString) => {
  const date = new Date(dateString)
  return date.toLocaleDateString("zh-CN", {
    year: "numeric",
    month: "long",
    day: "numeric",
    hour: "2-digit",
    minute: "2-digit",
  })
}


文件路径: src\views\Home.vue
<template>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex flex-col lg:flex-row gap-8">
      <!-- 主内容区域 -->
      <div class="flex-1">
        <!-- 筛选和排序 -->
        <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
          <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <div class="flex flex-wrap gap-2">
              <button
                v-for="tab in tabs"
                :key="tab.key"
                @click="activeTab = tab.key"
                :class="[
                  'px-4 py-2 rounded-lg text-sm font-medium transition-colors',
                  activeTab === tab.key
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                ]"
              >
                {{ tab.label }}
              </button>
            </div>
            
            <div class="flex items-center gap-4">
              <!-- 标签筛选 -->
              <select 
                v-model="selectedTag"
                class="border border-gray-300 rounded-lg px-3 py-2 text-sm"
              >
                <option value="">所有标签</option>
                <option v-for="tag in tags" :key="tag.id" :value="tag.name">
                  {{ tag.name }}
                </option>
              </select>
              
              <!-- 排序方式 -->
              <select 
                v-model="sortBy"
                class="border border-gray-300 rounded-lg px-3 py-2 text-sm"
              >
                <option value="created_at">最新发布</option>
                <option value="likes_count">最多点赞</option>
                <option value="comments_count">最多评论</option>
                <option value="views_count">最多浏览</option>
              </select>
            </div>
          </div>
        </div>
        
        <!-- 文章列表 -->
        <PostList 
          :posts="posts"
          :loading="loading"
          :has-more="hasMore"
          @load-more="loadMore"
        />
      </div>
      
      <!-- 侧边栏 -->
      <div class="w-full lg:w-80">
        <div class="space-y-6">
          <!-- 热门标签 -->
          <div class="bg-white rounded-lg shadow-sm p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">热门标签</h3>
            <div class="flex flex-wrap gap-2">
              <button
                v-for="tag in popularTags"
                :key="tag.id"
                @click="filterByTag(tag.name)"
                class="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm hover:bg-gray-200 transition-colors"
              >
                {{ tag.name }}
                <span class="ml-1 text-xs text-gray-500">{{ tag.count }}</span>
              </button>
            </div>
          </div>
          
          <!-- 推荐作者 -->
          <div class="bg-white rounded-lg shadow-sm p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">推荐作者</h3>
            <div class="space-y-4">
              <div 
                v-for="author in recommendedAuthors"
                :key="author.id"
                class="flex items-center justify-between"
              >
                <div class="flex items-center space-x-3">
                  <img 
                    :src="author.avatar || '/placeholder.svg?height=40&width=40'"
                    :alt="author.username"
                    class="w-10 h-10 rounded-full"
                  />
                  <div>
                    <p class="font-medium text-gray-900">{{ author.username }}</p>
                    <p class="text-sm text-gray-500">{{ author.posts_count }} 篇文章</p>
                  </div>
                </div>
                <button 
                  v-if="authStore.isAuthenticated"
                  @click="followAuthor(author.id)"
                  class="px-3 py-1 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700"
                >
                  关注
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, watch } from 'vue'
import { useAuthStore } from '../stores/auth'
import { postsAPI } from '../api/posts'
import { tagsAPI } from '../api/tags'
import { usersAPI } from '../api/users'
import PostList from '../components/post/PostList.vue'

const authStore = useAuthStore()

const posts = ref([])
const tags = ref([])
const popularTags = ref([])
const recommendedAuthors = ref([])
const loading = ref(false)
const hasMore = ref(true)
const currentPage = ref(1)

const activeTab = ref('latest')
const selectedTag = ref('')
const sortBy = ref('created_at')

const tabs = [
  { key: 'latest', label: '最新' },
  { key: 'hot', label: '热门' },
  { key: 'following', label: '关注', requiresAuth: true }
]

// It's important to call `useAuthStore` outside of conditional blocks.
useAuthStore();

const loadPosts = async (reset = false) => {
  if (loading.value) return
  
  loading.value = true
  try {
    const params = {
      page: reset ? 1 : currentPage.value,
      sort: sortBy.value,
      tag: selectedTag.value,
      type: activeTab.value
    }
    
    const response = await postsAPI.getPosts(params)
    
    if (reset) {
      posts.value = response.data.items
      currentPage.value = 1
    } else {
      posts.value.push(...response.data.items)
    }
    
    hasMore.value = response.data.has_more
    currentPage.value++
  } catch (error) {
    console.error('加载文章失败:', error)
  } finally {
    loading.value = false
  }
}

const loadMore = () => {
  if (hasMore.value && !loading.value) {
    loadPosts()
  }
}

const loadTags = async () => {
  try {
    const [tagsResponse, popularResponse] = await Promise.all([
      tagsAPI.getTags(),
      tagsAPI.getPopularTags()
    ])
    tags.value = tagsResponse.data
    popularTags.value = popularResponse.data
  } catch (error) {
    console.error('加载标签失败:', error)
  }
}

const loadRecommendedAuthors = async () => {
  try {
    const response = await usersAPI.getRecommendedAuthors()
    recommendedAuthors.value = response.data
  } catch (error) {
    console.error('加载推荐作者失败:', error)
  }
}

const filterByTag = (tagName) => {
  selectedTag.value = tagName
}

const followAuthor = async (authorId) => {
  try {
    await usersAPI.followUser(authorId)
    // 更新推荐作者列表
    loadRecommendedAuthors()
  } catch (error) {
    console.error('关注失败:', error)
  }
}

// 监听筛选条件变化
watch([activeTab, selectedTag, sortBy], () => {
  loadPosts(true)
})

onMounted(() => {
  loadPosts(true)
  loadTags()
  loadRecommendedAuthors()
})
</script>


